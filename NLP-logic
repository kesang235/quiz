import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:flutter/services.dart' show rootBundle;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(home: Scaffold(body: DifficultyPage()));
  }
}

class DifficultyPage extends StatefulWidget {
  @override
  _DifficultyPageState createState() => _DifficultyPageState();
}

class _DifficultyPageState extends State<DifficultyPage> {
  final String sentence =
      "Which of the following is NOT a common phishing vector?";

  String difficulty = " ";
  int matchedWords = 0;
  int wordCount = 0;
  String overallDifficulty = " ";
  int easyScore = 0;
  int mediumScore = 0;
  int hardScore = 0;

  @override
  void initState() {
    super.initState();
    processDifficulty();
  }

  Future<void> processDifficulty() async {
    await getGlossaryMatches();
    await getDifficulty();
    evaluateOverall();
  }

  Future<void> getGlossaryMatches() async {
    final csvData = await rootBundle.loadString('assets/glossary.csv');
    final lines = LineSplitter.split(csvData);
    final terms = lines.map((line) => line.trim().toLowerCase()).toSet();
    final formatSentence = sentence
        .toLowerCase()
        .replaceAll(RegExp(r'[^\w\s]'), '')
        .split(' ')
        .where((word) => word.isNotEmpty)
        .toList();
    final sentenceWords = formatSentence.toSet();
    final matches = terms.intersection(sentenceWords);

    matchedWords = matches.length;
    wordCount = formatSentence.length;

    //logic for Matched words
    if (matchedWords == 0) {
      easyScore += 1;
    } else if (matchedWords == 1) {
      mediumScore += 1;
    } else {
      hardScore += 1;
    }
  }

  Future<void> getDifficulty() async {
    final url = Uri.parse('https://api-inference.huggingface.co/models/facebook/bart-large-mnli');

    final headers = {
      'Authorization': 'Bearer ---------------',
      'Content-Type': 'application/json'
    };

    final body = jsonEncode({
      'inputs': sentence,
      'parameters': {
        'candidate_labels': ['easy', 'medium', 'hard']
      }
    });

    final response = await http.post(url, headers: headers, body: body);

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      final labels = List<String>.from(data['labels']);
      difficulty = labels.first;

      //logic for MNLI
      if (difficulty == 'easy') {
        easyScore += 1;
      } else if (difficulty == 'medium') {
        mediumScore += 1;
      } else if (difficulty == 'hard') {
        hardScore += 1;
      }
    }

    //Logic for length of Question
    if (wordCount < 5) {
      easyScore += 1;
    } else if (wordCount <= 8) {
      mediumScore += 1;
    } else {
      hardScore += 1;
    }

    setState(() {});
  }

  void evaluateOverall() {
    if (easyScore > mediumScore && easyScore > hardScore) {
      overallDifficulty = "Easy";
    } else if (mediumScore > easyScore && mediumScore > hardScore) {
      overallDifficulty = "Medium";
    } else if (hardScore > easyScore && hardScore > mediumScore) {
      overallDifficulty = "Hard";
    } else if (easyScore == mediumScore && mediumScore == hardScore && easyScore != 0) {
      overallDifficulty = "Hard";
    } else if (easyScore == 0 && mediumScore ==0 && hardScore == 0) {
      overallDifficulty = "Easy";
    } else if (easyScore == mediumScore && hardScore == 0) {
      overallDifficulty = "Easy";
    } else if (hardScore == mediumScore && easyScore == 0) {
      overallDifficulty = "Medium";
    } else if (hardScore == easyScore && mediumScore == 0) {
      overallDifficulty = "Hard";
    }
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Text(
          '$sentence\n\nAPI prediction: $difficulty\nMatched words: $matchedWords\nWord Count: $wordCount\nOverall: $overallDifficulty',
          textAlign: TextAlign.center,
          style: TextStyle(fontSize: 18),
        ),
      ),
    );
  }
}
